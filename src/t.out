Utils/Char.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var Char = function() {};
  Char.EOF = -1;
  Char.HORIZONTAL_TAB = 0x09;
  Char.LINE_FEED = 0x0A;
  Char.CARRIAGE_RETURN = 0x0D;
  Char.SPACE = 0x20;
  Char.BANG = 0x21;
  Char.DOUBLE_QUOTE = 0x22;
  Char.HASH = 0x23;
  Char.DOLLAR = 0x24;
  Char.PERCENT = 0x25;
  Char.AMPERSAND = 0x26;
  Char.SINGLE_QUOTE = 0x27;
  Char.OPEN_PAREN = 0x28;
  Char.CLOSE_PAREN = 0x29;
  Char.STAR = 0x2A;
  Char.PLUS = 0x2B;
  Char.COMMA = 0x2C;
  Char.MINUS = 0x2D;
  Char.PERIOD = 0x2E;
  Char.FORWARD_SLASH = 0x2F;
  Char.ZERO = 0x30;
  Char.ONE = 0x31;
  Char.SEVEN = 0x37;
  Char.NINE = 0x39;
  Char.COLON = 0x3A;
  Char.SEMI_COLON = 0x3B;
  Char.OPEN_ANGLE = 0x3C;
  Char.EQUAL = 0x3D;
  Char.CLOSE_ANGLE = 0x3E;
  Char.QUESTION = 0x3F;
  Char.AT = 0x40;
  Char.A = 0x41;
  Char.B = 0x42;
  Char.E = 0x45;
  Char.F = 0x46;
  Char.X = 0x58;
  Char.Z = 0x5A;
  Char.OPEN_SQUARE = 0x5B;
  Char.BACK_SLASH = 0x5C;
  Char.CLOSE_SQUARE = 0x5D;
  Char.HAT = 0x5E;
  Char.UNDERSCORE = 0x5F;
  Char.a = 0x61;
  Char.b = 0x62;
  Char.e = 0x65;
  Char.f = 0x66;
  Char.x = 0x78;
  Char.z = 0x7A;
  Char.OPEN_CURLY = 0x7B;
  Char.BAR = 0x7C;
  Char.CLOSE_CURLY = 0x7D;
  Char.TILDE = 0x7E;
  Char.isNewLine = function ($ch)
  {
    return $ch === Char.CARRIAGE_RETURN || $ch === Char.LINE_FEED;
  }

  Char.isWhitespace = function ($ch)
  {
    switch ($ch){
    case Char.CARRIAGE_RETURN:
    case Char.LINE_FEED:
    case Char.SPACE:
    case Char.HORIZONTAL_TAB:
      return true;
    default:
      return false;
    }
  }

  Char.isHexDigit = function ($ch)
  {
    return Char.isDigit($ch) || ($ch >= Char.A && $ch <= Char.F) || ($ch >= Char.a && $ch <= Char.f);
  }

  Char.hexDigitValue = function ($ch)
  {
    return (Char.isDigit($ch) ? Char.digitValue($ch) : ($ch <= Char.F ? $ch - Char.F + 10 : $ch - Char.f + 10));
  }

  Char.digitValue = function ($ch)
  {
    return $ch - Char.ZERO;
  }

  Char.isDigit = function ($ch)
  {
    return $ch >= Char.ZERO && $ch <= Char.NINE;
  }

  Char.isOctalDigit = function ($ch)
  {
    return $ch >= Char.ZERO && $ch <= Char.SEVEN;
  }

  Char.isBinaryDigit = function ($ch)
  {
    return $ch === Char.ZERO || $ch === Char.ONE;
  }

  Char.isNonDigit = function ($ch)
  {
    return $ch === Char.UNDERSCORE || Char.isUpperCaseLetter($ch) || Char.isLowerCaseLetter($ch);
  }

  Char.isLowerCaseLetter = function ($ch)
  {
    return $ch >= Char.a && $ch <= Char.z;
  }

  Char.isUpperCaseLetter = function ($ch)
  {
    return $ch >= Char.A && $ch <= Char.Z;
  }

  Char.isNameNonDigit = function ($ch)
  {
    return Char.isNonDigit($ch) || ($ch >= 0x7F && $ch <= 0xFF);
  }

  Char.isName = function ($ch)
  {
    return Char.isNameNonDigit($ch) || Char.isDigit($ch);
  }

  __export.Char = Char;
  }(Utils));
}(this));
Utils/ConsoleErrorReporter.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var ConsoleErrorReporter = function() {};
  ConsoleErrorReporter.prototype.error = function ($message)
  {
    fwrite(STDERR, $message + "\n");
  }

  __export.ConsoleErrorReporter = ConsoleErrorReporter;
  }(Utils));
}(this));
Utils/ErrorReporter.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  }(Utils));
}(this));
Utils/IndentedWriter.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var Exception = Exception;
  var IndentedWriter = function($file)
  {
    $this.$file = $file;
    $this.atBeginingOfLine = true;
    $this.indent = 0;
  }

  IndentedWriter.prototype.write = function ($value)
  {
    if ($this.atBeginingOfLine)
      {
        fwrite($this.file, str_repeat(' ', $this.indent));
      }
    fwrite($this.file, $value);
    $this.atBeginingOfLine = false;
  }

  IndentedWriter.prototype.writeLine = function ()
  {
    fwrite($this.file, "\n");
    $this.atBeginingOfLine = true;
  }

  IndentedWriter.prototype.indent = function ()
  {
    $this.indent += IndentedWriter.INDENT;
  }

  IndentedWriter.prototype.outdent = function ()
  {
    $this.indent -= IndentedWriter.INDENT;
    if ($this.indent < 0)
      {
        throw new Exception();
      }
  }

  IndentedWriter.INDENT = 2;
  __export.IndentedWriter = IndentedWriter;
  }(Utils));
}(this));
Utils/LineMap.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var LineMap = function($values)
  {
    $this.$values = $values;
    $this.offsets = LineMap.createOffsets($values);
  }

  LineMap.createOffsets = function ($values)
  {
    $result = [0];
    for ($index = 0; $index < strlen($values); $index++)
      {
        $char = ord($values[$index]);
        if (Char.isNewLine($char))
          {
            if ($char === Char.CARRIAGE_RETURN && $index + 1 < strlen($values) && ord($values[$index + 1]) === Char.LINE_FEED)
              {
                $index++;
              }
            ($result).push($index + 1);
          }
      }
    ($result).push(PHP_INT_MAX);
    return $result;
  }

  LineMap.prototype.offsetOfLine = function ($line)
  {
    return $this.offsets[$line];
  }

  LineMap.prototype.lineOfOffset = function ($offset)
  {
    for ($line = 0; $line < $this.offsets.count(); $line++)
      {
        if ($this.offsetOfLine($line) > $offset)
          {
            return $line - 1;
          }
      }
    return $line;
  }

  LineMap.prototype.columnOfOffset = function ($offset)
  {
    return $offset - $this.offsetOfLine($this.lineOfOffset($offset));
  }

  __export.LineMap = LineMap;
  }(Utils));
}(this));
Utils/Location.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var Location = function($file, $line, $column)
  {
    $this.$file = $file;
    $this.$line = $line;
    $this.$column = $column;
  }

  Location.prototype.file = function ()
  {
    return $this.file;
  }

  Location.prototype.line = function ()
  {
    return $this.line;
  }

  Location.prototype.column = function ()
  {
    return $this.column;
  }

  Location.prototype.displayLine = function ()
  {
    return $this.line + 1;
  }

  Location.prototype.displayColumn = function ()
  {
    return $this.column + 1;
  }

  Location.prototype.offset = function ()
  {
    return $this.file.lineMap().offsetOfLine($this.line) + $this.column;
  }

  Location.prototype.toString = function ()
  {
    return "{$this->file()->name()}({$this->displayLine()}, {$this->displayColumn()})";
  }

  Location.prototype.isEqual = function ($other)
  {
    return $this.file === $other.file && $this.line === $other.line && $this.column === $other.column;
  }

  __export.Location = Location;
  }(Utils));
}(this));
Utils/Range.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var Range = function($start, $end)
  {
    $this.$start = $start;
    $this.$end = $end;
  }

  Range.prototype.file = function ()
  {
    return $this.start.file();
  }

  Range.prototype.start = function ()
  {
    return $this.start;
  }

  Range.prototype.end = function ()
  {
    return $this.end;
  }

  Range.prototype.length = function ()
  {
    return $this.end.offset() - $this.start.offset();
  }

  Range.prototype.text = function ()
  {
    return substr($this.file().contents(), $this.start.offset(), $this.length());
  }

  __export.Range = Range;
  }(Utils));
}(this));
Utils/SourceFile.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var SourceFile = function($name, $contents)
  {
    $this.$name = $name;
    $this.$contents = $contents;
    $this.lineMap = new LineMap($contents);
  }

  SourceFile.prototype.name = function ()
  {
    return $this.name;
  }

  SourceFile.prototype.contents = function ()
  {
    return $this.contents;
  }

  SourceFile.prototype.count = function ()
  {
    return strlen($this.contents());
  }

  SourceFile.prototype.lineMap = function ()
  {
    return $this.lineMap;
  }

  SourceFile.prototype.location = function ($offset)
  {
    return new Location($this, $this.lineMap.lineOfOffset($offset), $this.lineMap.columnOfOffset($offset));
  }

  SourceFile.read = function ($filename)
  {
    return new SourceFile($filename, file_get_contents($filename));
  }

  __export.SourceFile = SourceFile;
  }(Utils));
}(this));
Utils/utils.hh
(function(__export) {
  var Utils = Utils || {};
  (function(__export) {
  var Exception = Exception;
  __export = function ($value, $message){
    if ($value === null)
      {
        throw new Exception($message !== null ? $message : 'Unexpected null');
      }
    return $value;
  }
  ;
  __export = function ($values, $value){
    return -1 !== $values.linearSearch($value);
  }
  ;
  }(Utils));
}(this));
