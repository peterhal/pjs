<?hh // strict

namespace Syntax
{

function parseTreeKindToString(ParseTreeKind $kind): string
{
  return ParseTreeKind::getNames()[$kind];
}

enum ParseTreeKind : int
{
  SCRIPT = 0;
  QUALIFIED_NAME = 1;
  REQUIRE_MULTIPLE_DIRECTIVE = 2;
  REQUIRE_ONCE_DIRECTIVE = 3;
  LITERAL = 4;
  ENUM_DECLARATION = 5;
  ENUMERATOR = 6;
  FUNCTION_DEFINITION = 7;
  PARAMETER_LIST = 8;
  PARAMETER_DECLARATION = 9;
  COMPOUND_STATEMENT = 10;
  PREDEFINED_NAME_TYPE = 11;
  KEYWORD_TYPE = 12;
  NULLABLE_TYPE = 13;
  ARRAY_TYPE = 14;
  NAMED_TYPE = 15;
  CLOSURE_TYPE = 16;
  TUPLE_TYPE = 17;
  TYPE_ARGUMENTS = 18;
  NAMESPACE_USE_DECLARATION = 19;
  NAMESPACE_USE_CLAUSE = 20;
  NAMESPACE_DEFINITION = 21;
  GENERIC_TYPE_PARAMETER = 22;
  CLASS_DECLARATION = 23;
  TRAIT_USE_CLAUSE = 24;
  CONST_DECLARATION = 25;
  CONST_DECLARATOR = 26;
  PROPERTY_DECLARATION = 27;
  PROPERTY_DECLARATOR = 28;
  METHOD_DEFINITION = 29;
  DESTRUCTOR_DECLARATION = 30;
  CONSTRUCTOR_DECLARATION = 31;
  CONSTRUCTOR_PARAMETER = 32;
  INTERFACE_DECLARATION = 33;
  REQUIRES_EXTENDS_CLAUSE = 34;
  REQUIRES_IMPLEMENTS_CLAUSE = 35;
  TRAIT_DECLARATION = 36;
  EMPTY_STATEMENT = 37;
  EXPRESSION_STATEMENT = 38;
  IF_STATEMENT = 39;
  ELSEIF_CLAUSE = 40;
  ELSE_CLAUSE = 41;
  DEFAULT_LABEL = 42;
  CASE_LABEL = 43;
  CASE_CLAUSE = 44;
  SWITCH_STATEMENT = 45;
  WHILE_STATEMENT = 46;
  DO_STATEMENT = 47;
  FOR_STATEMENT = 48;
  ALIAS_EXPRESSION = 49;
  FOR_EACH_STATEMENT = 50;
  CONTINUE_STATEMENT = 51;
  BREAK_STATEMENT = 52;
  RETURN_STATEMENT = 53;
  THROW_STATEMENT = 54;
  TRY_STATEMENT = 55;
  CATCH_CLAUSE = 56;
  FINALLY_CLAUSE = 57;
  YIELD_EXPRESSION = 58;
  ARRAY_ELEMENT_INITIALIZER = 59;
  COLLECTION_LITERAL = 60;
  VARIABLE_NAME = 61;
  SHAPE_LITERAL = 62;
  TUPLE_LITERAL = 63;
  FIELD_INITIALIZER = 64;
  ANONYMOUS_FUNCTION = 65;
  ANONYMOUS_FUNCTION_PARAMETER = 66;
  OBJECT_CREATION_EXPRESSION = 67;
  ARRAY_LITERAL = 68;
  SUBSCRIPT_OPERATOR = 69;
  FUNCTION_CALL = 70;
  MEMBER_SELECTION = 71;
  NULL_SAFE_MEMBER_SELECTION = 72;
  POSTFIX_OPERATOR = 73;
  SCOPE_RESOLUTION = 74;
  STATIC_NAME = 75;
  BINARY_EXPRESSION = 76;
  UNARY_EXPRESSION = 77;
  CAST_EXPRESSION = 78;
  CONDITIONAL_EXPRESSION = 79;
  LAMBDA_EXPRESSION = 80;
  LAMBDA_SIGNATURE = 81;
  PAREN_EXPRESSION = 82;
  PARSE_ERROR = 83;
}
}
